name: ONNX Runtime DirectML Builds

on:
  push:
    branches:
      - main
      - rel-*
  pull_request:
    branches:
      - main
      - rel-*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.ref || github.sha }}
  cancel-in-progress: true

jobs:
  build_x64_RelWithDebInfo:
    name: Windows GPU DML CI Pipeline
    env:
      OrtPackageId: Microsoft.ML.OnnxRuntime.DirectML
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      setVcvars: true
      ALLOW_RELEASED_ONNX_OPSET_ONLY: '0'
      DocUpdateNeeded: false
      ONNXRUNTIME_TEST_GPU_DEVICE_ID: '0'
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
          submodules: 'none'

      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          architecture: x64

      - name: Locate vcvarsall and Setup Env
        uses: ./.github/actions/locate-vcvarsall-and-setup-env
        with:
          architecture: x64

      - name: Install python modules
        run: python -m pip install -r .\tools\ci_build\github\windows\python\requirements.txt
        working-directory: ${{ github.workspace }}
        shell: cmd

      - uses: actions/setup-node@v5
        with:
          node-version: '20.x'

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: x64

      - uses: actions/setup-dotnet@v5
        env:
          PROCESSOR_ARCHITECTURE: x64
        with:
          dotnet-version: '8.x'

      - name: Use Nuget 6.x
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: '6.x'

      - name: NuGet restore
        run: nuget restore ${{ github.workspace }}\packages.config -ConfigFile ${{ github.workspace }}\NuGet.config -PackagesDirectory ${{ github.workspace }}\RelWithDebInfo
        shell: cmd

      - name: Set OnnxRuntimeBuildDirectory
        shell: pwsh
        run: |
          $buildDir = Join-Path ${{ runner.temp }} "build"
          echo "OnnxRuntimeBuildDirectory=$buildDir" >> $env:GITHUB_ENV

      - name: Build and Test
        working-directory: ${{ runner.temp }}
        run: |
          python.exe ${{ github.workspace }}\tools\ci_build\build.py `
            --config RelWithDebInfo `
            --build_dir "${{ github.workspace }}\build" `
            --skip_submodule_sync `
            --build_csharp `
            --parallel `
            --use_binskim_compliant_compile_flags `
            --cmake_generator "Visual Studio 17 2022" `
            --build_shared_lib `
            --skip_onnx_tests `
            --skip_tests `
            --build_wheel `
            --msbuild_extra_options "IncludeMobileTargets=false" `
            --use_dml `
            --enable_wcos `
            --build_nuget `
            --use_vcpkg `
            --use_vcpkg_ms_internal_asset_cache `
            --cmake_extra_defines onnxruntime_ENABLE_NPU_ADAPTER_ENUMERATION=1 `
            --update
          python.exe ${{ github.workspace }}\tools\ci_build\build.py `
            --config RelWithDebInfo `
            --build_dir "${{ github.workspace }}\build" `
            --skip_submodule_sync `
            --build_csharp `
            --parallel `
            --use_binskim_compliant_compile_flags `
            --cmake_generator "Visual Studio 17 2022" `
            --build_shared_lib `
            --skip_onnx_tests `
            --skip_tests `
            --build_wheel `
            --msbuild_extra_options "IncludeMobileTargets=false" `
            --use_dml `
            --enable_wcos `
            --build_nuget `
            --use_vcpkg `
            --use_vcpkg_ms_internal_asset_cache `
            --cmake_extra_defines onnxruntime_ENABLE_NPU_ADAPTER_ENUMERATION=1 `
            --build
          if ($lastExitCode -ne 0) {
            exit $lastExitCode
          }
          Remove-Item "${{ github.workspace }}\RelWithDebInfo" -Include "*.obj" -Recurse
        shell: pwsh

      - name: Upload ONNX Runtime Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: onnxruntime-dml-windows-x64
          path: |
            ${{ github.workspace }}/build
          retention-days: 30
